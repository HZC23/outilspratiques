/**
 * Script de d√©bogage pour identifier les probl√®mes d'initialisation
 */

// Fonction pour nettoyer le localStorage de mani√®re s√©curis√©e
function cleanupLocalStorage() {
    console.log('üîß D√©marrage du nettoyage du localStorage...');
    
    try {
        // Liste des cl√©s √† conserver (qui ne sont pas li√©es √† l'application)
        const keysToKeep = [
            // Ajouter ici les cl√©s externes que vous ne voulez pas supprimer
        ];
        
        // Sauvegarde des valeurs √† conserver
        const backup = {};
        keysToKeep.forEach(key => {
            if (localStorage.getItem(key)) {
                backup[key] = localStorage.getItem(key);
            }
        });
        
        // Vider compl√®tement le localStorage
        console.log('üßπ Suppression de toutes les entr√©es du localStorage...');
        localStorage.clear();
        
        // Restaurer les cl√©s √† conserver
        Object.keys(backup).forEach(key => {
            localStorage.setItem(key, backup[key]);
        });
        
        console.log('‚úÖ Nettoyage du localStorage termin√© avec succ√®s');
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage du localStorage:', error);
        return false;
    }
}

// Fonction pour v√©rifier l'int√©grit√© des donn√©es du localStorage
function checkLocalStorageIntegrity() {
    console.log('üîç V√©rification de l\'int√©grit√© du localStorage...');
    
    try {
        const invalidEntries = [];
        
        // Parcourir toutes les entr√©es du localStorage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (!key) continue;
            
            try {
                const value = localStorage.getItem(key);
                
                // Essayer de parser les valeurs qui semblent √™tre du JSON
                if (value && (value.startsWith('{') || value.startsWith('['))) {
                    JSON.parse(value);
                }
            } catch (parseError) {
                invalidEntries.push({ key, error: parseError.message });
            }
        }
        
        if (invalidEntries.length > 0) {
            console.warn('‚ö†Ô∏è Entr√©es invalides trouv√©es dans le localStorage:', invalidEntries);
            
            // Supprimer les entr√©es invalides
            invalidEntries.forEach(entry => {
                console.log(`üóëÔ∏è Suppression de l'entr√©e invalide: ${entry.key}`);
                localStorage.removeItem(entry.key);
            });
            
            return false;
        } else {
            console.log('‚úÖ Toutes les entr√©es du localStorage sont valides');
            return true;
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification de l\'int√©grit√© du localStorage:', error);
        return false;
    }
}

// Fonction pour r√©parer les donn√©es Supabase
function repairSupabaseData() {
    console.log('üîß V√©rification et r√©paration des donn√©es Supabase...');
    
    try {
        // Liste des cl√©s Supabase connues
        const supabaseKeys = [
            'supabase_url', 
            'supabase_key', 
            'sb-auth-token'
        ];
        
        // Expression r√©guli√®re pour les jetons d'authentification Supabase
        const sbTokensPattern = /^sb-.*-auth-token$/;
        
        let repairsPerformed = false;
        const repairedKeys = [];
        
        // Parcourir toutes les entr√©es du localStorage
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (!key) continue;
            
            // Traiter les cl√©s sp√©cifiques de Supabase
            if (supabaseKeys.includes(key) || sbTokensPattern.test(key)) {
                try {
                    const value = localStorage.getItem(key);
                    if (!value) continue;
                    
                    // Les URL et cl√©s API doivent √™tre des cha√Ænes simples
                    if (key === 'supabase_url' || key === 'supabase_key') {
                        if (value.startsWith('{') || value.startsWith('[')) {
                            console.warn(`‚ö†Ô∏è Donn√©e Supabase invalide pour ${key}, suppression.`);
                            localStorage.removeItem(key);
                            repairedKeys.push(key);
                            repairsPerformed = true;
                        }
                    } 
                    // Les jetons doivent √™tre du JSON valide
                    else {
                        try {
                            JSON.parse(value);
                        } catch (e) {
                            console.warn(`‚ö†Ô∏è Format de cache invalide pour "${key}". Suppression.`);
                            localStorage.removeItem(key);
                            repairedKeys.push(key);
                            repairsPerformed = true;
                        }
                    }
                } catch (e) {
                    console.warn(`‚ö†Ô∏è Erreur lors du traitement de ${key}, suppression.`);
                    localStorage.removeItem(key);
                    repairedKeys.push(key);
                    repairsPerformed = true;
                }
            }
        }
        
        if (repairsPerformed) {
            console.log(`‚úÖ R√©paration des donn√©es Supabase effectu√©e avec succ√®s. Cl√©s r√©par√©es: ${repairedKeys.join(', ')}`);
        } else {
            console.log('‚úÖ Aucune r√©paration n√©cessaire pour les donn√©es Supabase');
        }
        
        return repairsPerformed;
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©paration des donn√©es Supabase:', error);
        return false;
    }
}

// Fonction pour tester l'initialisation de Supabase
function testSupabaseInit() {
    console.log('üîÑ Test de l\'initialisation de Supabase...');
    
    try {
        // V√©rifier si la librairie Supabase est disponible
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå La librairie Supabase n\'est pas charg√©e');
            return false;
        }
        
        console.log('‚úÖ Librairie Supabase d√©tect√©e');
        
        // V√©rifier si la fonction createClient est disponible
        if (typeof window.supabase.createClient !== 'function') {
            console.error('‚ùå La fonction createClient de Supabase n\'est pas disponible');
            return false;
        }
        
        console.log('‚úÖ Fonction createClient de Supabase d√©tect√©e');
        
        // V√©rifier si l'√©v√©nement supabase-loaded est d√©clench√© correctement
        console.log('üîÑ V√©rification des √©couteurs d\'√©v√©nements pour supabase-loaded...');
        
        // Tenter de d√©clencher l'√©v√©nement manuellement pour voir s'il est trait√©
        window.dispatchEvent(new Event('supabase-loaded'));
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors du test de Supabase:', error);
        return false;
    }
}

// Fonction principale de d√©bogage
function runDebug() {
    console.log('üîç D√©marrage du d√©bogage...');
    
    // V√©rifier l'int√©grit√© du localStorage
    if (!checkLocalStorageIntegrity()) {
        console.log('üîÑ Des probl√®mes ont √©t√© d√©tect√©s dans le localStorage, tentative de nettoyage...');
        cleanupLocalStorage();
    }
    
    // R√©parer sp√©cifiquement les donn√©es Supabase
    repairSupabaseData();
    
    // Tester l'initialisation de Supabase
    testSupabaseInit();
    
    // Afficher un message de diagnostic dans l'interface utilisateur
    const mainContent = document.getElementById('main-content');
    if (mainContent) {
        const debugSection = document.createElement('div');
        debugSection.className = 'debug-section';
        debugSection.innerHTML = `
            <h2>Diagnostic de l'application</h2>
            <p>Un diagnostic est en cours d'ex√©cution pour r√©soudre les probl√®mes...</p>
            <button id="fix-storage-btn" class="btn primary-btn">R√©parer le stockage local</button>
            <button id="fix-supabase-btn" class="btn primary-btn">R√©parer les donn√©es Supabase</button>
            <button id="reload-app-btn" class="btn primary-btn">Recharger l'application</button>
        `;
        
        // Ins√©rer en haut du contenu principal
        mainContent.insertBefore(debugSection, mainContent.firstChild);
        
        // Ajouter les √©couteurs d'√©v√©nements aux boutons
        document.getElementById('fix-storage-btn').addEventListener('click', function() {
            cleanupLocalStorage();
            alert('Le stockage local a √©t√© nettoy√©. L\'application va √™tre recharg√©e.');
            window.location.reload();
        });
        
        document.getElementById('fix-supabase-btn').addEventListener('click', function() {
            if (repairSupabaseData()) {
                alert('Les donn√©es Supabase ont √©t√© r√©par√©es. L\'application va √™tre recharg√©e.');
            } else {
                alert('Aucune r√©paration n\'√©tait n√©cessaire pour les donn√©es Supabase.');
            }
            window.location.reload();
        });
        
        document.getElementById('reload-app-btn').addEventListener('click', function() {
            window.location.reload();
        });
    }
    
    console.log('‚úÖ D√©bogage termin√©');
}

// Ex√©cuter le d√©bogage au chargement de la page
document.addEventListener('DOMContentLoaded', runDebug);

// Cr√©er l'objet Debugger
const Debugger = {
    cleanupLocalStorage,
    checkLocalStorageIntegrity,
    repairSupabaseData,
    testSupabaseInit,
    runDebug
};

// Exporter pour les modules ES6
export { Debugger };

// Exposer au contexte global (window)
window.Debugger = Debugger; 